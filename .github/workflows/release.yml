name: Release

permissions:
  contents: write  # Needed for pushing tags and creating releases

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch/minor/major)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: minor
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  version_and_publish:
    name: Version Up and Release
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event.pull_request.merged == true &&
       contains(github.head_ref, 'release'))
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Install yarn
        run: npm install -g yarn

      - name: Set version type
        id: version_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TYPE=${{ inputs.version_type }}" >> $GITHUB_ENV
          else
            echo "TYPE=minor" >> $GITHUB_ENV
          fi

      - name: Update Version
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Previous tag found: ${PREVIOUS_TAG:-none}"
          yarn version --${{ env.TYPE }} --no-git-tag-version --no-commit-hooks
          VERSION=$(node -p "require('./package.json').version")

          git add package.json
          git commit -m "${VERSION}"
          git push origin HEAD:${GITHUB_REF#refs/heads/}

          git tag "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"  # Explicitly push the tag
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "PREVIOUS_TAG=${PREVIOUS_TAG}" >> $GITHUB_ENV

      - name: Generate Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_DATE=$(date '+%b %-d, %Y')
          COMMIT_SHA=$(git rev-parse HEAD)
      
          # Create temporary draft release with auto-generated notes
          gh release create "v${VERSION}" \
            --target ${COMMIT_SHA} \
            --generate-notes \
            --notes-start-tag "${PREVIOUS_TAG}" \
            --title "${VERSION} (${CURRENT_DATE})" \
            --draft
      
          # Get auto-generated notes
          AUTO_NOTES=$(gh release view "v${VERSION}" --json body -q .body)
      
          # Gather commit information with authors in PR-like format
          COMMIT_HISTORY=""
          COMMIT_COUNT=0
          while read -r COMMIT_HASH COMMIT_MSG; do
            COMMIT_COUNT=$((COMMIT_COUNT + 1))
            # Get author from commit metadata in GitHub
            GITHUB_USERNAME=$(gh api repos/$GITHUB_REPOSITORY/commits/$COMMIT_HASH --jq '.author.login' 2>/dev/null || echo "")
      
            # If we couldn't get username from API, use commit author name
            if [ -z "$GITHUB_USERNAME" ] || [ "$GITHUB_USERNAME" = "null" ]; then
              AUTHOR_NAME=$(git show -s --format="%an" $COMMIT_HASH)
              GITHUB_USERNAME=$AUTHOR_NAME
            fi
      
            # Extract PR number if present
            PR_NUM=$(echo "$COMMIT_MSG" | grep -o "#[0-9]\+" | head -1 | tr -d "#")
      
            if [ -n "$PR_NUM" ]; then
              COMMIT_HISTORY+="* $COMMIT_MSG by @$GITHUB_USERNAME in https://github.com/$GITHUB_REPOSITORY/pull/$PR_NUM"$'\n'
            else
              COMMIT_HISTORY+="* $COMMIT_MSG by @$GITHUB_USERNAME ($COMMIT_HASH)"$'\n'
            fi
          done < <(git log ${PREVIOUS_TAG}..HEAD --no-merges --pretty=format:"%h %s" | grep -v "^[a-f0-9]\\+ ${VERSION}")
      
          # Create comprehensive release notes
          FULL_NOTES="${AUTO_NOTES}"
      
          # Only add the additional section if there are PRs not covered in the auto-generated notes
          # or if there are multiple commits
          if [ $COMMIT_COUNT -gt 1 ]; then
            FULL_NOTES+=$'\n\n'"## Detailed Changes"$'\n'"${COMMIT_HISTORY}"
          fi
      
          # Update release with comprehensive notes
          echo "$FULL_NOTES" > /tmp/release-notes.md
          gh release edit "v${VERSION}" --draft=false --notes-file /tmp/release-notes.md
